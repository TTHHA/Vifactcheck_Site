name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main  # or master, depending on your default branch name
  workflow_dispatch:  # Allows manual triggering
  
env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for GitHub Pages deployment

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: |
          # Create dist directory
          mkdir -p dist
          
          # Copy static files
          cp -r index.html styles.css script.js dist/
          
          # Copy images directory if it exists
          if [ -d "image" ]; then
            cp -r image dist/
          fi
          
          # Create a production version of supabase.js
          echo "const { createClient } = require('@supabase/supabase-js');
          
          const supabaseUrl = '${{ secrets.SUPABASE_URL }}';
          const supabaseKey = '${{ secrets.SUPABASE_ANON_KEY }}';
          
          const supabase = createClient(supabaseUrl, supabaseKey);
          
          module.exports = supabase;" > dist/supabase.js
          
          # Create a production version of server.js
          echo "const express = require('express');
          const supabase = require('./supabase');
          const app = express();
          
          app.use(express.static('.'));
          
          // API endpoint to get leaderboard data
          app.get('/api/leaderboard', async (req, res) => {
              try {
                  const { data, error } = await supabase
                      .from('leaderboard')
                      .select('*')
                      .order('fullContext', { ascending: false });
                  
                  if (error) throw error;
                  
                  // Filter out entries with null or invalid values
                  const validData = (data || []).filter(entry => 
                      entry && 
                      entry.team && 
                      entry.model && 
                      typeof entry.fullContext === 'number' && 
                      typeof entry.goldEvidence === 'number'
                  );
                  
                  res.json(validData);
              } catch (error) {
                  res.json([]);
              }
          });
          
          const port = process.env.PORT || 3000;
          app.listen(port, () => {
              console.log(\`Server running on port \${port}\`);
          });" > dist/server.js
          
          # Create package.json with all required dependencies
          echo '{
            "name": "vifactcheck-static",
            "version": "1.0.0",
            "private": true,
            "description": "ViFactCheck Leaderboard - Static Version",
            "dependencies": {
              "@supabase/supabase-js": "^2.39.7",
              "express": "^4.18.2"
            },
            "engines": {
              "node": ">=14.0.0"
            }
          }' > dist/package.json

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          clean: true  # Clean the deployment branch before deploying
          commit-message: "Deploy website - ${{ github.event.head_commit.message }}" 